// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
SpeedController* RobotMap::driveTrainLeftMotor = NULL;
SpeedController* RobotMap::driveTrainRightMotor = NULL;
RobotDrive* RobotMap::driveTrainRobotDrive = NULL;
SpeedController* RobotMap::frontArmLiftMotor = NULL;
DigitalInput* RobotMap::frontArmBottomLimit = NULL;
Encoder* RobotMap::frontArmRotationCounter = NULL;
DigitalInput* RobotMap::frontArmTopLimit = NULL;
Encoder* RobotMap::rearArmRotationCounter = NULL;
SpeedController* RobotMap::rearArmLiftMotor = NULL;
DigitalInput* RobotMap::rearArmTopLimit = NULL;
DigitalInput* RobotMap::rearArmBottomLimit = NULL;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
void RobotMap::init() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	LiveWindow* lw = LiveWindow::GetInstance();
	driveTrainLeftMotor = new Jaguar(1, 1);
	lw->AddActuator("DriveTrain", "LeftMotor", (Jaguar*) driveTrainLeftMotor);
	
	driveTrainRightMotor = new Jaguar(1, 2);
	lw->AddActuator("DriveTrain", "RightMotor", (Jaguar*) driveTrainRightMotor);
	
	driveTrainRobotDrive = new RobotDrive(driveTrainLeftMotor, driveTrainRightMotor);
	
	driveTrainRobotDrive->SetSafetyEnabled(true);
        driveTrainRobotDrive->SetExpiration(0.1);
        driveTrainRobotDrive->SetSensitivity(0.5);
        driveTrainRobotDrive->SetMaxOutput(1.0);
        
	frontArmLiftMotor = new Victor(1, 4);
	lw->AddActuator("FrontArm", "LiftMotor", (Victor*) frontArmLiftMotor);
	
	frontArmBottomLimit = new DigitalInput(1, 1);
	lw->AddSensor("FrontArm", "BottomLimit", frontArmBottomLimit);
	
	frontArmRotationCounter = new Encoder(1, 5, 1, 6, false);
	lw->AddSensor("FrontArm", "RotationCounter", frontArmRotationCounter);
	frontArmRotationCounter->SetDistancePerPulse(1.0);
        // frontArmRotationCounter->SetPIDSourceParameter(frontArmRotationCounter->PIDSourceParameter.kDistance);
        frontArmRotationCounter->Start();
	frontArmTopLimit = new DigitalInput(1, 2);
	lw->AddSensor("FrontArm", "TopLimit", frontArmTopLimit);
	
	rearArmRotationCounter = new Encoder(1, 8, 1, 9, false);
	lw->AddSensor("RearArm", "RotationCounter", rearArmRotationCounter);
	rearArmRotationCounter->SetDistancePerPulse(1.0);
        // rearArmRotationCounter->SetPIDSourceParameter(rearArmRotationCounter->PIDSourceParameter.kDistance);
        rearArmRotationCounter->Start();
	rearArmLiftMotor = new Victor(1, 3);
	lw->AddActuator("RearArm", "LiftMotor", (Victor*) rearArmLiftMotor);
	
	rearArmTopLimit = new DigitalInput(1, 3);
	lw->AddSensor("RearArm", "TopLimit", rearArmTopLimit);
	
	rearArmBottomLimit = new DigitalInput(1, 4);
	lw->AddSensor("RearArm", "BottomLimit", rearArmBottomLimit);
	
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
